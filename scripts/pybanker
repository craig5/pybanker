#!/usr/bin/env python3
"""
Command line tool to mange your finances.
"""
# core python libraries
import argparse
import configparser
import logging
# third party libraries
# custom libraries
import pybanker
import pybanker.shared




class PyBankerCli(object):
    global_config = pybanker.shared.GlobalConfig()

    def __init__(self):
        self._init_logger()
        self._init_vars()
        self._load_config()
        self._init_cli()

    def _init_logger(self):
        """Initialize logger. (self.logger)"""
        logger_name = self.__class__.__name__
        logger_level = self.global_config.default_logger_level
        format_string = '[%(levelname)s] %(name)s(%(lineno)d) - %(message)s'
        formatter = logging.Formatter(format_string)
        handler = logging.StreamHandler()
        handler.setFormatter(formatter)
        handler.setLevel(logger_level)
        self.logger = logging.getLogger(logger_name)
        self.logger.setLevel(logger_level)
        self.logger.addHandler(handler)
        self.logger.debug('Logger initialized: {0}'.format(logger_name))

    def _init_cli(self):
        self.cli = argparse.ArgumentParser(description=__doc__)
        self.cli.add_argument(
            '--debug',
            action='store_true',
            help='Set debug level (logger)'
            )
        command_opts = [cur['option'] for cur in self.global_config.commands]
        self.cli.add_argument(
            'command',
            nargs='?',
            default=command_opts[0],
            choices=command_opts,
            help='Command to run'
            )

    def _init_vars(self):
        self.config = None
        self.data_dir = None

    def _load_config(self):
        conf_file = self.global_config.default_config_file
        self.logger.debug('Loading config: {0}'.format(conf_file))
        self.config = configparser.ConfigParser()
        with open(conf_file, 'r') as fp:
            self.config.readfp(fp)
        def_sec = 'default'
        self.data_dir = self.config.get(def_sec, 'data_dir')
        self.logger.debug('Data dir: {0}'.format(self.data_dir))

    def parse_args(self):
        self.logger.debug('Parsing cli args.')
        args = self.cli.parse_args()
        if 'debug' in args:
            debug_level = logging.DEBUG
            self.logger.setLevel(debug_level)
            for h in self.logger.handlers:
                h.setLevel(debug_level)
            self.logger.debug('Logger level reset to debug.')
        self.command = args.command
        self.logger.debug('Command: {}'.format(self.command))

    def main(self):
        self.logger.debug('Inside main.')
        self.parse_args()
        bank = pybanker.Banker(logger_level=self.logger.level)
        bank.data_dir = self.data_dir
        bank.main(self.command)


if __name__ == '__main__':
    pbc = PyBankerCli()
    pbc.main()
